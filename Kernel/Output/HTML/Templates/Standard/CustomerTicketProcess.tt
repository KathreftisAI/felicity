# --
# Copyright (C) 2001-2017 OTRS AG, http://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --
[% RenderBlockStart("RichText") %]
<script src="[% Config("Frontend::RichTextPath") %]ckeditor.js" type="text/javascript"></script>
[% RenderBlockEnd("RichText") %]

[% IF Data.ProcessList %]
<div id="MainBox" class="TicketProcess ARIARoleMain">
    <div class="Content">
        <form action="[% Env("CGIHandle") %]" method="post" enctype="multipart/form-data" name="compose" id="NewProcessTicket" class="Validate PreventMultipleSubmits">
            <input type="hidden" name="Action" value="[% Env("Action") %]"/>
            <input type="hidden" name="Subaction" value="DisplayActivityDialog"/>
            <input type="hidden" name="FormID" value="[% Data.FormID | html %]"/>
            <fieldset>
                <div>
[% RenderBlockStart("ProcessList") %]
                    <label class="Mandatory" for="ProcessEntityID"><span class="Marker">*</span>[% Translate("Process") | html %]:</label>
                    [% Data.ProcessList %]
                    <div id="ProcessEntityIDError" class="TooltipErrorMessage"><p>[% Translate("This field is required.") | html %]</p></div>
                    <div id="ProcessEntityIDServerError" class="TooltipErrorMessage"><p>[% Translate("This field is required.") | html %]</p></div>
                </div>
                <div class="Spacing Clear"></div>
[% RenderBlockEnd("ProcessList") %]
            </fieldset>
        </form>
        <div id="AJAXLoader" class="Spacing Center Hidden">
            <span class="AJAXLoader" title="[% Translate("Loading") | html %]"></span>
        </div>
        <div id="ActivityDialogContent"></div>
    </div>
</div>
[% WRAPPER JSOnDocumentComplete %]
<script type="text/javascript">//<![CDATA[
    $('#ProcessEntityID').bind('change', function() {

        // remove/destroy CKEditor instances
        // This is needed to initialize other instances (in other activity dialogs)
        // without a page reload
        if (typeof CKEDITOR !== 'undefined' && CKEDITOR.instances) {
            $.each(CKEDITOR.instances, function (Key, Value) {
                CKEDITOR.instances[Key].destroy();
            });
        }

        if ($('#ProcessEntityID').val()) {

            // remove the content of the activity dialog
            $('#ActivityDialogContent').empty();

            // fade out the empty container so it will fade in again on processes change
            // is not recommended to empty after fade out at this point since the transition offect
            // will not look so nice
            $('#ActivityDialogContent').fadeOut('fast');

            // show loader icon
            $('#AJAXLoader').removeClass('Hidden');

            // get new ActivityDialog content
            Core.AJAX.FunctionCall('[% Env("Baselink") %]', 'Action=[% Env("Action") %];Subaction=DisplayActivityDialogAJAX;IsMainWindow=1;IsAjaxRequest=1;ProcessEntityID=' + $('#ProcessEntityID').val(), function (Response) {
                var $ElementToUpdate = $('#ActivityDialogContent'),
                    JavaScriptString = '',
                    ErrorMessage = '';
                if (!Response) {

                    // We are out of the OTRS App scope, that's why an exception would not be caught. Therefor we handle the error manually.
                    Core.Exception.HandleFinalError(new Core.Exception.ApplicationError("No content received.", 'CommunicationError'));
                    $('#AJAXLoader').addClass('Hidden');
                }
                else if ($ElementToUpdate && isJQueryObject($ElementToUpdate) && $ElementToUpdate.length) {
                    $ElementToUpdate.get(0).innerHTML = Response;
                    $ElementToUpdate.find('script').each(function() {
                        JavaScriptString += $(this).html();
                        $(this).remove();
                    });
                    $ElementToUpdate.fadeIn();
                    try {
                        /*jslint evil: true */
                        eval(JavaScriptString);
                    }
                    catch (Exception) {}

                    // Handle special server errors (Response = <div class="ServerError" data-message="Message"></div>)
                    // Check if first element has class 'ServerError'
                    if ( $ElementToUpdate.children().first().hasClass('ServerError') ) {
                        ErrorMessage = $ElementToUpdate.children().first().data('message');

                        // Add class ServerError to the process select element
                        $('#ProcessEntityID').addClass('ServerError');
                        // Set a custom error message to the proccess select element
                        $('#ProcessEntityIDServerError').children().first().text(ErrorMessage);
                    }

                    Core.Form.Validate.Init();
                    $('#AJAXLoader').addClass('Hidden');
                    $('#AJAXDialog').val('1');

                    Core.UI.InputFields.Activate($ElementToUpdate);
                    // Register event for tree selection dialog
                    Core.UI.TreeSelection.InitTreeSelection();

                    // move help triggers into field rows for dynamic fields
                    $('.Row > .FieldHelpContainer').each(function() {
                        if (!$(this).next('label').find('.Marker').length) {
                            $(this).prependTo($(this).next('label'));
                        }
                        else {
                            $(this).insertAfter($(this).next('label').find('.Marker'));
                        }
                    });

                    // Initially display dynamic fields with TreeMode = 1 correctly
                    Core.UI.TreeSelection.InitDynamicFieldTreeViewRestore();
                }
                else {

                    // We are out of the OTRS App scope, that's why an exception would not be caught. Therefor we handle the error manually.
                    Core.Exception.HandleFinalError(new Core.Exception.ApplicationError("No such element id: " + $ElementToUpdate.attr('id') + " in page!", 'CommunicationError'));
                    $('#AJAXLoader').addClass('Hidden');
                }
            }, 'html');
        }
        else {
            $('#ActivityDialogContent').fadeOut(400, function() {
                $('#ActivityDialogContent').empty();
            });
        }
        return false;
    });
//]]></script>
[% RenderBlockStart("PreSelectProcess") %]
<script type="text/javascript">//<![CDATA[
$('#ProcessEntityID').val('[% Data.ProcessID | html %]').trigger('change');
//]]></script>
[% RenderBlockEnd("PreSelectProcess") %]
[% END %]
[% END %]
